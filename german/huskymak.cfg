# Config-Makefile for Husky-packages
# automatically generated by HuskyPnt

##############################################################################
#PART 1: DIRECTORIES AND FILENAMES
#You always need to change these to match your preferences
##############################################################################

# Where libraries (both .a and .so files) should be placed
# You should take care that this directory is listed in the LD_LIBRARY_PATH
# environment variable (if necessary, modify your /etc/profile file).
LIBDIR=$libdir$

# Where the programs should be placed.
BINDIR=$bindir$

# Where manual pages should be placed.
MANDIR=$mandir$

# Where include files should be placed (don't worry, no files will be over-
# written, Husky will use it's own subdirectories below this directory):
INCDIR=$incdir$

# The fidoconfig config file will be in this DIRECTORY:
CFGDIR=$cfgdir$

# IF you have a working texinfo installation (consisting of the "makeinfo"
# and "install-info" program), you should uncomment and adapt this 
# line - it will cause GNU info documentation to be built and installed
# into the given directory. If you leave the comment out, the doucmentation
# will not be compiled, and you won't know how to use the software ;-).
# You should take care that this directory is listed in the INFOPATH 
# environment variable (if necessary, modify your /etc/profile file).
INFODIR=$infodir$

# The same as above, but for HTML documentation. This requires a working
# "texi2html" program.
HTMLDIR=$htmldir$

# Name of the config file of MSGED TE:
MSGEDCFG=\\"~/.fido/msged.cfg\\"


##############################################################################
#PART 2: PLATFORM DEPENDENT SECTION
#If you are running Linux with GNU gcc, you don't need to modify anything in
#the following sections. If you are running any other operating system or using
#any other C compiler, you should check the values. For some operating
#systems, the comments contain information on what you need to change.
##############################################################################


##############################################################################
# Programs
##############################################################################

# C-Compiler
CC=$CC$

#Msged needs access to a termcap library. Define it's name here.
#On Linux, termcap is integrated into ncurses:
TERMCAP=ncurses
#On FreeBSD or commerical Unices, you may try on of the following:
#TERMCAP=termcap
#TERMCAP=terminfo

# C++-Compiler
GPP=$GPP$

# Pascal-Compiler (the compiler is optional, but the value of this
# variable must be defined even if you don't have a Pascal compiler).
PC=ppc386

# archiver (for object-files)
AR=$AR$

# how to build shared libraries
# use gcc on Linux and FreeBSD
# use ld on BeOS and also try ld if gcc does not work for you
# only "gcc" will put so version numbers into the shared object 
@ifdef beos
MKSHARED=ld
@else
MKSHARED=gcc
@endif

# remove file
RM=$RM$

# The "install" program.
# On Linux and FreeBSD/NetBSD, use install
# On Tru64 Unix, use this:
# INSTALL=installbsd
# On Solaris, use this:
# INSTALL=/usr/ucb/install
INSTALL=$INSTALL$

# link file (DOS: copy file)
LN=$LN$

# create directory
MKDIR=$MKDIR$

# update dynamic library cache
# If your operating system does not need this, you may comment out this line.
LDCONFIG=$LDCONFIG$

# rename a file
MV=$MV$

#copy a file
CP=$CP$

#Make a library file usable. You may leave this empty if it is n/a.
RANLIB=$RANLIB$

# C-style header file to pascal unit converter (shipped with fpc)
H2PAS=$H2PAS$

#############################################################################
# program options
#############################################################################

# type of operating system (UNIX,MSDOS,OS2,WINNT)
# for BeOS, use UNIX!
OSTYPE=$OSTYPE$

# short name of operating system (used for PID lines etc.)
UNAME=$UNAME$

# Do you want debug information? (This is only for developers.)
DEBUG=$debug$

# 8.3 names - NOTE: This switch is obsolete and probably does not work!
SHORTNAMES=0


# The DYNLIBS switch controls if dynamic or static linkage is used.
# This is tricky. If you set DYNLIBS=1, dynamic libraries (.so files)
# will be generated and used. This will only work if you are running "gcc"
# on Linux, FreeBSD or another real Unix operating system.

# On other systems, you must set DYNLIBS=0. Even on Linux, you might 
# want to do this if you are sick of shared library version mismatch
# problems.

# If you set DYNLIBS=0, but have Unix/Linux, you might want to add add
# "-static" to the OPTCFLAGS and WARNCFLAGS variables (above) in order 
# to avoid linkage with old .so files that may be  floating around
DYNLIBS=$DYNLIBS$

# C-compiler: specify name of executable
EXENAMEFLAG=-o

# C-compiler: generate warnings
WARNFLAGS=-Wall

# C-compiler: optimization
OPTCFLAGS=-c -s -O3 -fomit-frame-pointer -fstrength-reduce -fPIC

# C-compiler: debug
DEBCFLAGS=-c -ggdb

# C-compiler: additional defines, for features of your OS
ADDCDEFS=$ADDCDEFS$
# On Solaris, Msged only works with the curses interface, so use:
#ADDCDEFS=-DHAS_POPEN -DUSE_CURSES
# Some Systems (e.g. old Linux systems like SuSe 6) uses different style of semctl. Try -DHAS_SEMUN
#ADDCDEFS=-DHAS_POPEN -DHAS_SEMUN
# Due problems with Semaphores, compile without semaphor handling !
#ADDCDEFS=-DHAS_POPEN -DNOSEMAPHORES


# Pascal-Compiler: optimization
OPTPFLAGS=

# Pascal-Compiler: debug
DEBPFLAGS=

# Pascal-Compiler: additional defines, for features of your OS
ADDPDEFS=

# object linker: optimization
OPTLFLAGS=-s

# object linker: debug
DEBLFLAGS=

# options for installing programs
IBOPT=-c -s

# options for installing libs
ILOPT=-c

# options for installing man-pages
IMOPT=-c

# options for installing includes
IIOPT=-c

# options for linking files
LNOPT=$LNOPT$

# archiver options
AR_R = $AR_R$

# options for creating directories
MKDIROPT=$MKDIROPT$

#############################################################################
# file extensions
#############################################################################

# extension of executable (e.g. ".exe")
EXE=$EXE$

# extension of object file
OBJ=$OBJ$

# extension of (static) libs
LIB=$LIB$

# extension of compiled pascal units
TPU=$TPU$

# directory separator (DOS: "\", Unix: "/")
DIRSEP=$DIRSEP$

